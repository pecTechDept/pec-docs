"use strict";(self.webpackChunkpec_docs=self.webpackChunkpec_docs||[]).push([[311],{7639:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"Development Guidelines/guidelines-component-org","title":"Component Organization","description":"This section outlines the best practices for structuring components to ensure reusability and maintaining a scalable codebase for the PEC application.","source":"@site/docs/03-Development Guidelines/03-component-org.md","sourceDirName":"03-Development Guidelines","slug":"/Development Guidelines/guidelines-component-org","permalink":"/pec-docs/Development Guidelines/guidelines-component-org","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"guidelines-component-org","title":"Component Organization"},"sidebar":"tutorialSidebar","previous":{"title":"Style Guide","permalink":"/pec-docs/Development Guidelines/guidelines-style-guide"},"next":{"title":"Git Workflow","permalink":"/pec-docs/Development Guidelines/guidelines-git-workflow"}}');var i=o(4848),s=o(8453);const r={id:"guidelines-component-org",title:"Component Organization"},l="Component Organization",c={},a=[{value:"Organize by Feature or Functionality",id:"organize-by-feature-or-functionality",level:3},{value:"Naming Conventions",id:"naming-conventions",level:3},{value:"Organizing Code in a Component",id:"organizing-code-in-a-component",level:3},{value:"Document Component Usage",id:"document-component-usage",level:3},{value:"Example Documentation:",id:"example-documentation",level:4},{value:"Contacting Support",id:"contacting-support",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"component-organization",children:"Component Organization"})}),"\n",(0,i.jsx)(n.p,{children:"This section outlines the best practices for structuring components to ensure reusability and maintaining a scalable codebase for the PEC application."}),"\n",(0,i.jsx)(n.h3,{id:"organize-by-feature-or-functionality",children:"Organize by Feature or Functionality"}),"\n",(0,i.jsx)(n.p,{children:"Components are categorized into the following categories:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Common components"})," are the most generic and reusable elements that can be used throughout the application, such as icons and loaders."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Layout components"})," define the structure of the application's pages, such as headers and footers, ensuring a consistent look throughout the site."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"UI components"})," are related to the user interface but are more complex and might be used less frequently than those in the common folder, such as modals and tabs."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Specific components"})," are tailored to particular features or pages, containing functionality unique to those areas, like user profile cards or specifalized content displays."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"naming-conventions",children:"Naming Conventions"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Component Names:"})," Use kebab-case for file names in the ",(0,i.jsx)(n.code,{children:"/app"})," directory and PascalCase for component files."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Example:"})," ",(0,i.jsx)(n.code,{children:"/app/user-profile.tsx"})," or ",(0,i.jsx)(n.code,{children:"/components/UserProfile.tsx"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Folder Names:"})," Use kebab-case for folder names if they consist of multiple word."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Example:"})," ",(0,i.jsx)(n.code,{children:"user-profile"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Folder Names:"})," Place test files next to their component files."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"|-- components\r\n|   |-- common\r\n|       |-- Footer.tsx\r\n|       |-- Footer.test.tsx     # Test file for Footer component\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"organizing-code-in-a-component",children:"Organizing Code in a Component"}),"\n",(0,i.jsx)(n.p,{children:"Code must be properly organized within a component in order to be readable and maintainable. A well-structured component generally follows a consisitent order:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Imports:"})," Bring in necessary dependencies."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Type definitions (Props):"})," Define props and state to clarify the data the component expects and manages."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Component definition:"})," Outline the core core logic and rendering behavior."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Hooks:"})," Group hooks like ",(0,i.jsx)(n.code,{children:"useState"})," and ",(0,i.jsx)(n.code,{children:"useEffect"})," together at the top to handle state and lifecycle events."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Event handlers and methods:"})," Organize these in a section to easi;y find and modify interaction logic."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"document-component-usage",children:"Document Component Usage"}),"\n",(0,i.jsx)(n.p,{children:"Include documentation for each component to explain its purpose, props, and usage examples. This can be done using JSDoc comments within the component files or in a separate markdown file."}),"\n",(0,i.jsx)(n.h4,{id:"example-documentation",children:"Example Documentation:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"/**\r\n * Button component for call-to-action purposes.\r\n * \r\n * @param {string} label - The text to display on the button.\r\n * @param {function} onClick - The function to call when the button is clicked.\r\n * @returns {JSX.Element}\r\n */\r\nconst CallToAction: React.FC<{ label: string; onClick: () => void }> = \r\n({ label, onClick }) => {\r\n  return <button onClick={onClick}>{label}</button>;\r\n};\n"})}),"\n",(0,i.jsx)(n.p,{children:"Aim to keep each component small and focused on single responsibility. This makes them easier to test, reuse, and maintain."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"If a component grows too large, consider breaking it down into smaller subcomponents."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"contacting-support",children:"Contacting Support"}),"\n",(0,i.jsxs)(n.p,{children:["If you encounter any issues or have questions not covered in this documentation, our dedicated support team is here to assist you. Contact us at ",(0,i.jsx)(n.a,{href:"mailto:techdept@premiumeventconsulting.co.za",children:"techdept@premiumeventconsulting.co.za"}),"."]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>l});var t=o(6540);const i={},s=t.createContext(i);function r(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);