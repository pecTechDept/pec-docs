"use strict";(self.webpackChunkpec_docs=self.webpackChunkpec_docs||[]).push([[234],{7443:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>d,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"Development Guidelines/guidelines-git-standards","title":"Git Standards","description":"This section establishes clear Git standards for maintaining a consistent and organised workflow. The following guidelines cover branch naming conventions, commit message formats, and best practices for pull requests.","source":"@site/docs/03-Development Guidelines/05-git-standards.md","sourceDirName":"03-Development Guidelines","slug":"/Development Guidelines/guidelines-git-standards","permalink":"/pec-docs/Development Guidelines/guidelines-git-standards","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"id":"guidelines-git-standards","title":"Git Standards"},"sidebar":"tutorialSidebar","previous":{"title":"Git Workflow","permalink":"/pec-docs/Development Guidelines/guidelines-git-workflow"}}');var t=s(4848),r=s(8453);const d={id:"guidelines-git-standards",title:"Git Standards"},c="Git Standards",l={},a=[{value:"Branch Naming",id:"branch-naming",level:3},{value:"Commit Messages",id:"commit-messages",level:3},{value:"Types:",id:"types",level:4},{value:"Guidelines",id:"guidelines",level:4},{value:"Pull Requests",id:"pull-requests",level:3},{value:"Description:",id:"description",level:4},{value:"Code Review Checklist:",id:"code-review-checklist",level:4},{value:"Contacting Support",id:"contacting-support",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"git-standards",children:"Git Standards"})}),"\n",(0,t.jsx)(n.p,{children:"This section establishes clear Git standards for maintaining a consistent and organised workflow. The following guidelines cover branch naming conventions, commit message formats, and best practices for pull requests."}),"\n",(0,t.jsx)(n.h3,{id:"branch-naming",children:"Branch Naming"}),"\n",(0,t.jsx)(n.p,{children:"This application uses a simple branching approach, with the main branch for production and with feature branches for development work."}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Branch"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"main"}),(0,t.jsx)(n.td,{children:"For production-ready code"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"feat/*"}),(0,t.jsx)(n.td,{children:"For adding, refactoring or removing a feature"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"bugfix/*"}),(0,t.jsx)(n.td,{children:"For fixing issues found in master/main"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"hotfix/*"}),(0,t.jsx)(n.td,{children:"For urgent production fixes"})]})]})]}),"\n",(0,t.jsx)(n.p,{children:"When creating branches, use clear and descriptive naming convention to identify the purpose of the branch. The description should be short and in kebab case."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Example:"})," ",(0,t.jsx)(n.code,{children:"feature/add-contact-form"})]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"commit-messages",children:"Commit Messages"}),"\n",(0,t.jsx)(n.p,{children:"Follow the Convention Commits standard for writing commit messsages. This helps in generating changelogs and understanding the history of changes at a glance."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Format:"})," ",(0,t.jsx)(n.code,{children:"[optional git emoji] <type>([optional scope]): <description>"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Example:"})," ",(0,t.jsx)(n.code,{children:"\u2728 feat(auth): add JWT-based authentication"})]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"types",children:"Types:"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Branch"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"feat:"}),(0,t.jsx)(n.td,{children:"A new feature"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"fix:"}),(0,t.jsx)(n.td,{children:"A bug fix"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"docs:"}),(0,t.jsx)(n.td,{children:"Documentation changes only"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"refactor:"}),(0,t.jsx)(n.td,{children:"Code changes without bug fixes or new features"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"revert:"}),(0,t.jsx)(n.td,{children:"Reverting previous change"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"test:"}),(0,t.jsx)(n.td,{children:"Adding missing tests or correcting existing tests"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"chore:"}),(0,t.jsx)(n.td,{children:"About build process or auxiliary tool changes"})]})]})]}),"\n",(0,t.jsx)(n.h4,{id:"guidelines",children:"Guidelines"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Keep messages concise bu informative"}),"\n",(0,t.jsx)(n.li,{children:"Limit the subject line to 72 characters or less"}),"\n",(0,t.jsxs)(n.li,{children:["Use this guide to find the appropriate git commit message emoji: ",(0,t.jsx)(n.a,{href:"https://gist.github.com/parmentf/035de27d6ed1dce0b36a",children:"https://gist.github.com/parmentf/035de27d6ed1dce0b36a"})]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"pull-requests",children:"Pull Requests"}),"\n",(0,t.jsx)(n.p,{children:"When creating pull requests(PRs), follow these best practices to ensure clarity and facilitate effective code reviews:"}),"\n",(0,t.jsx)(n.h4,{id:"description",children:"Description:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Include a detailed description of the changes made in the PR."}),"\n",(0,t.jsx)(n.li,{children:"Explain why the changes were made and any relevant context that reviewers should know."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"code-review-checklist",children:"Code Review Checklist:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Ensure that all code adheres to established coding guidelines and standards before requesting a review."}),"\n",(0,t.jsx)(n.li,{children:"Check for proper testing coverage and include any necessary tests."}),"\n",(0,t.jsx)(n.li,{children:"Make sure that all commits are well-defined and follow the commit message standards outlined above."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"contacting-support",children:"Contacting Support"}),"\n",(0,t.jsxs)(n.p,{children:["If you encounter any issues or have questions not covered in this documentation, our dedicated support team is here to assist you. Contact us at ",(0,t.jsx)(n.a,{href:"mailto:techdept@premiumeventconsulting.co.za",children:"techdept@premiumeventconsulting.co.za"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>c});var i=s(6540);const t={},r=i.createContext(t);function d(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);